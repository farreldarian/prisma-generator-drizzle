generator drizzle {
  provider = "bunx prisma-generator-drizzle"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// start -sqlite
enum UserType {
  TypeOne
  TypeTwo
}

// end -sqlite

model Team {
  id        String   @id
  name      String
  users     User[]
  createdAt DateTime @default(now())
}

model User {
  id                String     @id
  email             String     @unique
  name              String?
  bigint            BigInt?
  boolean           Boolean?
  datetime          DateTime?
  decimal           Decimal?
  enum              UserType // -sqlite
  float             Float?
  json              Json? // -sqlite
  bytes             Bytes?
  team              Team?      @relation(fields: [teamId], references: [id])
  teamId            String?
  receivedTransfers Transfer[] @relation("transfer_to")
  sentTransfers     Transfer[] @relation("transfer_from")
  createdAt         DateTime   @default(now())
}

model Payment {
  id                String    @id
  paymentTransfer   Transfer? @relation("Payment_paymentTransfer", fields: [paymentTransferId], references: [id])
  paymentTransferId String?   @unique
  taxTransfer       Transfer? @relation("Payment_taxTransfer", fields: [taxTransferId], references: [id])
  taxTransferId     String?   @unique
}

model Transfer {
  id        String   @id
  from      User     @relation("transfer_from", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("transfer_to", fields: [toId], references: [id])
  toId      String
  createdAt DateTime @default(now())
  payment   Payment? @relation("Payment_paymentTransfer")
  tax       Payment? @relation("Payment_taxTransfer")
}

model SelfReference {
  id String @id

  referringManyId String?
  referringMany   SelfReference?  @relation("SelfReference_referringMany", fields: [referringManyId], references: [id])
  referredMany    SelfReference[] @relation("SelfReference_referringMany")

  referringUniqueId String?        @unique
  referringUnique   SelfReference? @relation("SelfReference_referringUnique", fields: [referringUniqueId], references: [id])
  referredUnique    SelfReference? @relation("SelfReference_referringUnique")
}

// #region Implicit relationship purposes

model TransactionHeader {
  id       String          @id
  products ProductDetail[]
}

model ProductDetail {
  id           String              @id
  transactions TransactionHeader[]
}

// With custom table name
model Post {
  id         String     @id
  categories Category[] @relation("CustomCategoryToPost")
}

model Category {
  id    String @id
  posts Post[] @relation("CustomCategoryToPost")
}

// #endregion

// #region Ignore

model IgnoredModel {
  id String @id @default(uuid())

  @@ignore
}

model ModelWithIgnoredField {
  id              String @id @default(uuid())
  shouldBeIgnored String @ignore
}

// #endregion

// #region Default
model Default {
  id        String    @id
  /// drizzle.default @paralleldrive/cuid2::createId
  alsoId    String?
  /// drizzle.default crypto::randomBytes `() => randomBytes(16).toString('hex')`
  salt      String?
  date      DateTime? @default("2024-01-23T00:00:00Z")
  int       Int?      @default(1)
  boolean   Boolean?  @default(true)
  createdAt DateTime? @default(now())
  string    String?   @default("John")
  bigint    BigInt?   @default(1)
  decimal   Decimal?  @default(1.123)
  float     Float?    @default(1.123)
  bytes     Bytes?    @default("aGVsbG8gd29ybGQ=")

  enum UserType @default(TypeTwo) // -sqlite
  json Json?    @default("{\"foo\": \"bar\"}") // -sqlite

  stringList String[] @default(["John", "Doe"]) // -sqlite -mysql
}

model AutoIncrement {
  id  Int    @id @default(autoincrement())
  ref String @unique
}

// #endregion

// #region Field

// start -sqlite
enum Enum {
  A
  B
}

// end -sqlite

model Field {
  id       String    @id
  string   String?
  boolean  Boolean?
  int      Int?
  bigint   BigInt?
  float    Float?
  decimal  Decimal?
  datetime DateTime?
  bytes    Bytes?
  json     Json? // -sqlite
  enum     Enum? // -sqlite
}

// #endregion
